1)stack has a finite space it maybe overflow. called as stackOverflow
generally occurs in context of recurrsion.
2)linear data structure.
3)push(),pop(),top(),isEmpty(),size()
4)types of stack: fixed size and dynamic stack->implemented using linkedList
5)stack using array and linked list.
6)monotonic stack: using a monotonic stack include finding the nearest smaller element on the left or right side of an array element, finding the maximum area of a histogram, and solving the sliding window maximum problem
                 : a monotonic stack allows us to avoid nested loops and unnecessary comparisons
                 :A stack is called a monotonic stack if all the elements starting from the bottom of the stack is either in increasing or in decreasing order.
7)monotonic increasing stack:t is a stack in which the elements are in increasing order from the bottom to the top of the stack. 
eg:Example: 1, 3, 10, 15, 17.
		Consider an array Arr[] = {1, 4, 5, 3, 12, 10}
		For i = 0: stk = {1}
		For i = 1: stk = {1, 4}
		For i = 2: stk = {1, 4, 5}
		For i = 3: stk = {1, 3}  [pop 4 and 5 as 4 > 3 and 5 > 3]
		For i = 4: stk = {1, 3, 12}
		For i = 5: stk = {1, 3, 10} [pop 12 as 12 > 10] 

		Time Complexity: O(N)
		Auxiliary Space: O(N)

8)monotoni decreasing stack:A stack is monotonically decreasing if Itâ€™s elements are in decreasing order from the bottom to the top of the stack. 

eg		Consider an array: arr[] = {15, 17, 12, 13, 14, 10}
		For i = 0: stk = {15}
		For i = 1: stk = {17} [pop 15 as 15 < 17]
		For i = 2: stk = {17, 12}
		For i = 3: stk = {17, 13}  [pop 12 as 12 < 13]
		For i = 4: stk = {17, 14}  [pop 13 as 13 < 14]
		For i = 5: stk = {17, 14, 10}


application:
Also can be used for its varieties.
Next Smaller Element
Previous Greater Element
Previous Smaller Element